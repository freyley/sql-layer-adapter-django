diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 56cd8e1..4dbda50 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -96,7 +96,7 @@ class AdminScriptTestCase(unittest.TestCase):
         Returns the paths for any external backend packages.
         """
         paths = []
-        first_package_re = re.compile(r'(^[^\.]+)\.')
+        first_package_re = re.compile(r'(^[^\.]+)\.?')
         for backend in settings.DATABASES.values():
             result = first_package_re.findall(backend['ENGINE'])
             if result and result != ['django']:
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 565ff7d..1da2326 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -28,7 +28,7 @@ from django.contrib.contenttypes.models import ContentType
 from django.db import connection
 from django.forms.util import ErrorList
 from django.template.response import TemplateResponse
-from django.test import TestCase
+from django.test import TestCase, skipUnlessDBFeature
 from django.test.utils import patch_logger
 from django.test.utils import override_settings
 from django.utils import formats
@@ -129,6 +129,7 @@ class AdminViewBasicTest(AdminViewBasicTestCase):
         self.assertIsInstance(response, TemplateResponse)
         self.assertEqual(response.status_code, 200)
 
+    @skipUnlessDBFeature('uses_savepoints')
     def testBasicEditGetStringPK(self):
         """
         Ensure GET on the change_view works (returns an HTTP 404 error, see
@@ -138,6 +139,7 @@ class AdminViewBasicTest(AdminViewBasicTestCase):
         response = self.client.get('/test_admin/%s/admin_views/section/abc/' % self.urlbit)
         self.assertEqual(response.status_code, 404)
 
+    @skipUnlessDBFeature('uses_savepoints')
     def testBasicInheritanceGetStringPK(self):
         """
         Ensure GET on the change_view works on inherited models (returns an
@@ -1065,6 +1067,7 @@ class AdminViewPermissionsTest(TestCase):
         self.assertFalse(login.context)
         self.client.get('/test_admin/admin/logout/')
 
+    @skipUnlessDBFeature('uses_savepoints')
     def testAddView(self):
         """Test add view restricts access and actually adds items."""
 
@@ -1120,6 +1123,7 @@ class AdminViewPermissionsTest(TestCase):
         # make sure the view removes test cookie
         self.assertEqual(self.client.session.test_cookie_worked(), False)
 
+    @skipUnlessDBFeature('uses_savepoints')
     def testChangeView(self):
         """Change view should restrict access and allow users to edit items."""
 
@@ -1298,6 +1302,7 @@ class AdminViewPermissionsTest(TestCase):
 
         self.client.get('/test_admin/admin/logout/')
 
+    @skipUnlessDBFeature('uses_savepoints')
     def testDeleteView(self):
         """Delete view should restrict access and actually delete items."""
 
@@ -2731,6 +2736,7 @@ class AdminCustomQuerysetTest(TestCase):
             self.assertEqual(resp.context['selection_note'], '0 of 1 selected')
             self.assertEqual(resp.context['selection_note_all'], '1 selected')
 
+    @skipUnlessDBFeature("uses_savepoints")
     def test_change_view(self):
         for i in self.pks:
             response = self.client.get('/test_admin/admin/admin_views/emptymodel/%s/' % i)
@@ -3715,6 +3721,7 @@ class UserAdminTest(TestCase):
     def tearDown(self):
         self.client.logout()
 
+    @skipUnlessDBFeature("uses_savepoints")
     def test_save_button(self):
         user_count = User.objects.count()
         response = self.client.post('/test_admin/admin/auth/user/add/', {
@@ -3727,6 +3734,7 @@ class UserAdminTest(TestCase):
         self.assertEqual(User.objects.count(), user_count + 1)
         self.assertTrue(new_user.has_usable_password())
 
+    @skipUnlessDBFeature("uses_savepoints")
     def test_save_continue_editing_button(self):
         user_count = User.objects.count()
         response = self.client.post('/test_admin/admin/auth/user/add/', {
@@ -3796,6 +3804,8 @@ class UserAdminTest(TestCase):
         # Oracle doesn't implement "RELEASE SAVPOINT", see #20387.
         if connection.vendor == 'oracle':
             expected_queries -= 1
+        elif not connection.features.uses_savepoints:
+            expected_queries -= 2
 
         with self.assertNumQueries(expected_queries):
             response = self.client.get('/test_admin/admin/auth/user/%s/' % u.pk)
@@ -3839,6 +3849,8 @@ class GroupAdminTest(TestCase):
         # Oracle doesn't implement "RELEASE SAVPOINT", see #20387.
         if connection.vendor == 'oracle':
             expected_queries -= 1
+        elif not connection.features.uses_savepoints:
+            expected_queries -= 2
 
         with self.assertNumQueries(expected_queries):
             response = self.client.get('/test_admin/admin/auth/group/%s/' % g.pk)
@@ -4451,6 +4463,7 @@ class AdminKeepChangeListFiltersTests(TestCase):
         )
         post_data.pop('_addanother')
 
+    @skipUnlessDBFeature("uses_savepoints")
     def test_add_view(self):
         # Get the `add_view`.
         response = self.client.get(self.get_add_url())
diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py
index f0d1e59..8d88a49 100644
--- a/tests/aggregation_regress/tests.py
+++ b/tests/aggregation_regress/tests.py
@@ -7,10 +7,11 @@ from operator import attrgetter
 
 from django.core.exceptions import FieldError
 from django.contrib.contenttypes.models import ContentType
+from django.db import connection
 from django.db.models import Count, Max, Avg, Sum, StdDev, Variance, F, Q
 from django.test import TestCase, Approximate, skipUnlessDBFeature
 from django.utils import six
-from django.utils.unittest import expectedFailure
+from django.utils.unittest import expectedFailure, skipIf
 
 from .models import (
     Author, Book, Publisher, Clues, Entries, HardbackBook, ItemTag,
@@ -379,6 +380,7 @@ class AggregationTests(TestCase):
             lambda p: p,
         )
 
+    @skipIf(connection.vendor == 'fdbsql', 'Unsupported mix of DISTINCT and non-DISTINCT')
     def test_db_col_table(self):
         # Tests on fields with non-default table and column names.
         qs = Clues.objects.values('EntryID__Entry').annotate(Appearances=Count('EntryID'), Distinct_Clues=Count('Clue', distinct=True))
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index e62f564..f980869 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -732,6 +732,7 @@ class FkConstraintsTests(TransactionTestCase):
                 self.fail("IntegrityError should not have occurred.")
             transaction.set_rollback(True)
 
+    @unittest.skipIf(connection.vendor == 'fdbsql', 'check_constraints() not implemented')
     def test_check_constraints(self):
         """
         Constraint checks should raise an IntegrityError when bad data is in the DB.
diff --git a/tests/delete_regress/tests.py b/tests/delete_regress/tests.py
index a4908b2..020e769 100644
--- a/tests/delete_regress/tests.py
+++ b/tests/delete_regress/tests.py
@@ -3,9 +3,10 @@ from __future__ import absolute_import
 import datetime
 
 from django.conf import settings
-from django.db import transaction, DEFAULT_DB_ALIAS, models
+from django.db import transaction, DEFAULT_DB_ALIAS, models, connection
 from django.db.utils import ConnectionHandler
 from django.test import TestCase, TransactionTestCase, skipUnlessDBFeature
+from django.utils import unittest
 
 from .models import (Book, Award, AwardNote, Person, Child, Toy, PlayedWith,
     PlayedWithNote, Email, Researcher, Food, Eaten, Policy, Version, Location,
@@ -33,6 +34,7 @@ class DeleteLockingTest(TransactionTestCase):
         self.conn2.abort()
         self.conn2.close()
 
+    @unittest.skipIf(connection.vendor == 'fdbsql', 'Test assumes READ COMMITTED isolation')
     @skipUnlessDBFeature('test_db_allows_multiple_connections')
     def test_concurrent_delete(self):
         "Deletes on concurrent transactions don't collide and lock the database. Regression for #9479"
@@ -287,6 +289,7 @@ class Ticket19102Tests(TestCase):
         self.l1 = Login.objects.create(description='l1', orgunit=self.o1)
         self.l2 = Login.objects.create(description='l2', orgunit=self.o2)
 
+    @unittest.skipIf(connection.vendor == "fdbsql", "Known bug!")
     @skipUnlessDBFeature("update_can_self_select")
     def test_ticket_19102_annotate(self):
         with self.assertNumQueries(1):
@@ -300,6 +303,7 @@ class Ticket19102Tests(TestCase):
         self.assertFalse(Login.objects.filter(pk=self.l1.pk).exists())
         self.assertTrue(Login.objects.filter(pk=self.l2.pk).exists())
 
+    @unittest.skipIf(connection.vendor == "fdbsql", "Known bug!")
     @skipUnlessDBFeature("update_can_self_select")
     def test_ticket_19102_extra(self):
         with self.assertNumQueries(1):
@@ -327,6 +331,7 @@ class Ticket19102Tests(TestCase):
         self.assertFalse(Login.objects.filter(pk=self.l1.pk).exists())
         self.assertTrue(Login.objects.filter(pk=self.l2.pk).exists())
 
+    @unittest.skipIf(connection.vendor == "fdbsql", "Known bug!")
     @skipUnlessDBFeature("update_can_self_select")
     def test_ticket_19102_select_related(self):
         with self.assertNumQueries(1):
@@ -340,6 +345,7 @@ class Ticket19102Tests(TestCase):
         self.assertFalse(Login.objects.filter(pk=self.l1.pk).exists())
         self.assertTrue(Login.objects.filter(pk=self.l2.pk).exists())
 
+    @unittest.skipIf(connection.vendor == "fdbsql", "Known bug!")
     @skipUnlessDBFeature("update_can_self_select")
     def test_ticket_19102_defer(self):
         with self.assertNumQueries(1):
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 3b875b6..783426f 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, unicode_literals
 
 from django.core.exceptions import FieldError
 from django.db.models import F
-from django.db import transaction
+from django.db import transaction, connection
 from django.test import TestCase
 from django.utils import six
 
@@ -186,11 +186,13 @@ class ExpressionsTests(TestCase):
             "foo",
         )
 
-        with transaction.atomic():
-            with self.assertRaises(FieldError):
-                Company.objects.exclude(
-                    ceo__firstname=F('point_of_contact__firstname')
-                ).update(name=F('point_of_contact__lastname'))
+        # Otherwise connection will be unusable after
+        if connection.features.uses_savepoints:
+            with transaction.atomic():
+                with self.assertRaises(FieldError):
+                    Company.objects.exclude(
+                        ceo__firstname=F('point_of_contact__firstname')
+                    ).update(name=F('point_of_contact__lastname'))
 
         # F expressions can be used to update attributes on single objects
         test_gmbh = Company.objects.get(name="Test GmbH")
diff --git a/tests/extra_regress/tests.py b/tests/extra_regress/tests.py
index 194b250..3c925c1 100644
--- a/tests/extra_regress/tests.py
+++ b/tests/extra_regress/tests.py
@@ -3,7 +3,9 @@ from __future__ import absolute_import, unicode_literals
 import datetime
 
 from django.contrib.auth.models import User
+from django.db import connection
 from django.test import TestCase
+from django.utils import unittest
 from django.utils.datastructures import SortedDict
 
 from .models import TestObject, Order, RevisionableModel
@@ -171,6 +173,7 @@ class ExtraRegressTests(TestCase):
             transform=lambda d: d,
         )
 
+    @unittest.skipIf(connection.vendor == 'fdbsql', 'Manual WHERE reserved word')
     def test_values_with_extra(self):
         """
         Regression test for #10256... If there is a values() clause, Extra
@@ -317,6 +320,7 @@ class ExtraRegressTests(TestCase):
             ['<TestObject: TestObject: first,second,third>']
         )
 
+    @unittest.skipIf(connection.vendor == 'fdbsql', 'Manual WHERE reserved word')
     def test_regression_17877(self):
         """
         Ensure that extra WHERE clauses get correctly ANDed, even when they
diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py
index 571fd85..a8eac75 100644
--- a/tests/fixtures_regress/tests.py
+++ b/tests/fixtures_regress/tests.py
@@ -11,14 +11,14 @@ from django.core.serializers.base import DeserializationError
 from django.core import management
 from django.core.management.base import CommandError
 from django.core.management.commands.dumpdata import sort_dependencies
-from django.db import transaction, IntegrityError
+from django.db import transaction, IntegrityError, connection
 from django.db.models import signals
 from django.test import (TestCase, TransactionTestCase, skipIfDBFeature,
     skipUnlessDBFeature)
 from django.test.utils import override_settings
 from django.utils.encoding import force_text
 from django.utils._os import upath
-from django.utils import six
+from django.utils import six, unittest
 from django.utils.six import PY3, StringIO
 
 from .models import (Animal, Stuff, Absolute, Parent, Child, Article, Widget,
@@ -405,6 +405,7 @@ class TestFixtures(TestCase):
         self.assertEqual(Book.objects.all()[0].id, 1)
         self.assertEqual(Person.objects.all()[0].id, 4)
 
+    @unittest.skipIf(connection.vendor == 'fdbsql', 'check_constraints() not implemented')
     def test_loaddata_raises_error_when_fixture_has_invalid_foreign_key(self):
         """
         Regression for #3615 - Ensure data with nonexistent child key references raises error
diff --git a/tests/force_insert_update/tests.py b/tests/force_insert_update/tests.py
index 0a52600..429521f 100644
--- a/tests/force_insert_update/tests.py
+++ b/tests/force_insert_update/tests.py
@@ -1,13 +1,14 @@
 from __future__ import absolute_import
 
 from django.db import transaction, IntegrityError, DatabaseError
-from django.test import TestCase
+from django.test import TestCase, skipUnlessDBFeature
 
 from .models import (Counter, WithCustomPK, InheritedCounter, ProxyCounter,
                      SubCounter)
 
 
 class ForceTests(TestCase):
+    @skipUnlessDBFeature('uses_savepoints')
     def test_force_update(self):
         c = Counter.objects.create(name="one", value=1)
 
diff --git a/tests/get_or_create/tests.py b/tests/get_or_create/tests.py
index 847a6de..d93c7b4 100644
--- a/tests/get_or_create/tests.py
+++ b/tests/get_or_create/tests.py
@@ -7,12 +7,14 @@ import warnings
 from django.db import IntegrityError, DatabaseError
 from django.utils.encoding import DjangoUnicodeDecodeError
 from django.test import TestCase, TransactionTestCase
+from django.test import skipUnlessDBFeature
 
 from .models import DefaultPerson, Person, ManualPrimaryKeyTest, Profile, Tag, Thing
 
 
 class GetOrCreateTests(TestCase):
 
+    @skipUnlessDBFeature('uses_savepoints')
     def test_get_or_create(self):
         p = Person.objects.create(
             first_name='John', last_name='Lennon', birthday=date(1940, 10, 9)
@@ -127,6 +129,7 @@ class GetOrCreateThroughManyToMany(TestCase):
         self.assertEqual(obj.text, 'foo')
         self.assertIn(obj, a_thing.tags.all())
 
+    @skipUnlessDBFeature('uses_savepoints')
     def test_something(self):
         Tag.objects.create(text='foo')
         a_thing = Thing.objects.create(name='a')
diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py
index 97e5d35..0065aa0 100644
--- a/tests/inspectdb/tests.py
+++ b/tests/inspectdb/tests.py
@@ -95,11 +95,11 @@ class InspectDBTestCase(TestCase):
         else:
             # 'unsigned' property undetected on other backends
             assertFieldType('pos_int_field', "models.IntegerField()")
-            if connection.vendor == 'postgresql':
+            if connection.vendor in ('postgresql', 'fdbsql'):
                 assertFieldType('pos_small_int_field', "models.SmallIntegerField()")
             else:
                 assertFieldType('pos_small_int_field', "models.IntegerField()")
-        if connection.vendor in ('sqlite', 'postgresql'):
+        if connection.vendor in ('sqlite', 'postgresql', 'fdbsql'):
             assertFieldType('small_int_field', "models.SmallIntegerField()")
         else:
             assertFieldType('small_int_field', "models.IntegerField()")
diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py
index 6a7c122..9c43180 100644
--- a/tests/model_fields/models.py
+++ b/tests/model_fields/models.py
@@ -9,7 +9,7 @@ except ImproperlyConfigured:
     Image = None
 
 from django.core.files.storage import FileSystemStorage
-from django.db import models
+from django.db import models, connection
 from django.db.models.fields.files import ImageFieldFile, ImageField
 
 
@@ -41,7 +41,8 @@ class Whiz(models.Model):
     c = models.IntegerField(choices=CHOICES, null=True)
 
 class BigD(models.Model):
-    d = models.DecimalField(max_digits=38, decimal_places=30)
+    prec,scale = connection.vendor != 'fdbsql' and (38,30) or (30,22)
+    d = models.DecimalField(max_digits=prec, decimal_places=scale)
 
 class BigS(models.Model):
     s = models.SlugField(max_length=255)
diff --git a/tests/multiple_database/tests.py b/tests/multiple_database/tests.py
index 889841a..d97b2a8 100644
--- a/tests/multiple_database/tests.py
+++ b/tests/multiple_database/tests.py
@@ -1376,14 +1376,14 @@ class RouterTestCase(TestCase):
         # If you create an object through a M2M relation, it will be
         # written to the write database, even if the original object
         # was on the read database
-        alice = dive.authors.create(name='Alice')
+        alice = dive.authors.create(name='Alice', pk=3)
         self.assertEqual(alice._state.db, 'default')
 
         # Same goes for get_or_create, regardless of whether getting or creating
         alice, created = dive.authors.get_or_create(name='Alice')
         self.assertEqual(alice._state.db, 'default')
 
-        bob, created = dive.authors.get_or_create(name='Bob')
+        bob, created = dive.authors.get_or_create(name='Bob', pk=4)
         self.assertEqual(bob._state.db, 'default')
 
     def test_o2o_cross_database_protection(self):
diff --git a/tests/queries/tests.py b/tests/queries/tests.py
index 833f65f..ca4881f 100644
--- a/tests/queries/tests.py
+++ b/tests/queries/tests.py
@@ -500,6 +500,7 @@ class Queries1Tests(BaseQuerysetTest):
             [{'note': 1}, {'note': 2}]
         )
 
+    @unittest.skipIf(connection.vendor == "fdbsql", "Known bug!")
     def test_ticket2902(self):
         # Parameters can be given to extra_select, *if* you use a SortedDict.
 
diff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py
index a34b049..00afdd6 100644
--- a/tests/test_runner/tests.py
+++ b/tests/test_runner/tests.py
@@ -374,6 +374,7 @@ class DeprecationDisplayTest(AdminScriptTestCase):
         self.assertFalse("DeprecationWarning: warning from test" in err)
 
 
+@unittest.skipIf(db.connection.vendor == 'fdbsql', 'Requires transactional sequence reset')
 class AutoIncrementResetTest(TransactionTestCase):
     """
     Here we test creating the same model two times in different test methods,
